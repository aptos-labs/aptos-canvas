---
- hosts: webservers
  name: Base installation
  tags:
    - base
  tasks:
    - name: Install packages
      become: true
      ansible.builtin.package:
        name:
          - acl
          - dnsutils
          - git
          - nginx
          - gcc
          - zip
          - unzip
          - lsof
          - ripgrep
          - tmux
          - jq
          - vim
        state: present
    - name: Install cargo
      ansible.builtin.shell: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - name: Make user systemd directory
      become: true
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user"
        state: directory
        owner: "{{ ansible_user_id }}"
        mode: '0777'
    - name: Enable linger for user dport
      become: true
      ansible.builtin.command: loginctl enable-linger dport


- hosts: webservers
  become: true
  tags: nginx
  tasks:
    - name: Make /var/www directory
      become: true
      ansible.builtin.file:
        path: /var/www
        state: directory
        owner: "{{ ansible_user_id }}"
        mode: '0777'
    - name: Delete /etc/nginx/sites-available
      ansible.builtin.file:
        path: /etc/nginx/sites-available
        state: absent
    - name: Delete /etc/nginx/sites-enabled
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled
        state: absent
    - name: Make /etc/nginx/sites-available
      ansible.builtin.file:
        path: /etc/nginx/sites-available
        state: directory
        mode: '0755'
    - name: Make symlink for sites-available called sites-enabled
      ansible.builtin.file:
        src: /etc/nginx/sites-available
        dest: /etc/nginx/sites-enabled
        state: link
    - name: Delete /etc/nginx/conf.d
      ansible.builtin.file:
        path: /etc/nginx/conf.d
        state: absent
    - name: Add nginx.conf file
      become: true
      ansible.builtin.template:
        src: templates/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: "{{ ansible_user_id }}"
        group: root
        mode: '0644'
    - name: Add security.conf file
      become: true
      ansible.builtin.template:
        src: templates/security.conf
        dest: /etc/nginx/security.conf
        owner: "{{ ansible_user_id }}"
        group: root
        mode: '0644'
    - name: Add proxy_params file
      become: true
      ansible.builtin.template:
        src: templates/proxy_params
        dest: /etc/nginx/proxy_params
        owner: "{{ ansible_user_id }}"
        group: root
        mode: '0644'


- hosts: dbservers
  name: Install Postgres
  tags:
    - database
    - db
    - postgresql
  become: true
  tasks:
    - name: Install Postgres
      ansible.builtin.package:
        name:
          - postgresql
        state: present
    - name: Start and enable postgresSQL
      ansible.builtin.systemd:
        name: postgresql
        enabled: true
        state: started
    - name: Create database for testnet
      become: true
      become_user: postgres
      ansible.builtin.command: createdb graffio_testnet
    - name: Create database for mainnet
      become: true
      become_user: postgres
      ansible.builtin.command: createdb graffio_mainnet
    - name: Create superuser
      become: true
      become_user: postgres
      ansible.builtin.command: psql -c "CREATE ROLE graffio WITH LOGIN SUPERUSER PASSWORD 'pword';"


- hosts: webservers
  tags:
    - binary
  name: Build aptos processor
  tasks:
    - name: Clone repo
      ansible.builtin.git:
        repo: 'https://github.com/aptos-labs/graffio'
        dest: "/home/{{ ansible_user_id }}/graffio"
        force: true
    - name: Build processor
      ansible.builtin.command: "/home/{{ ansible_user_id }}/.cargo/bin/cargo build -p service --release"
      args:
        chdir: "/home/{{ ansible_user_id }}/graffio/processor"


- hosts: webservers
  tags:
    - config
    - configs
  name: Create processor configs
  tasks:
  - name: Make image directory for testnet
    become: true
    ansible.builtin.file:
      path: "/var/canvases/testnet"
      state: directory
      owner: "{{ ansible_user_id }}"
      mode: '0777'
  - name: Make image directory for mainnet
    become: true
    ansible.builtin.file:
      path: "/var/canvases/mainnet"
      state: directory
      owner: "{{ ansible_user_id }}"
      mode: '0777'
  - name: Create processor config for testnet
    become: true
    vars:
      txn_stream_service_address: "35.223.137.149:50051"
      canvas_contract_address: "0x5047733bb1360184c72e42fabb906a614cc547d751fc5764d2f74c9fd723035a"
      network: testnet
      api_port: 7677
      initial_starting_version: 640109325
    ansible.builtin.template:
      src: templates/processor/config.yaml.j2
      dest: "/var/canvases/testnet/config.yaml"
      owner: "{{ ansible_user_id }}"
      group: root
      mode: '0777'
  - name: Create processor config for mainnet
    become: true
    vars:
      txn_stream_service_address: "34.30.218.153:50051"
      canvas_contract_address: "0x5047733bb1360184c72e42fabb906a614cc547d751fc5764d2f74c9fd723035a"
      network: mainnet
      api_port: 7678
      initial_starting_version: 215986449
    ansible.builtin.template:
      src: templates/processor/config.yaml.j2
      dest: "/var/canvases/mainnet/config.yaml"
      owner: "{{ ansible_user_id }}"
      group: root
      mode: '0777'


- hosts: webservers
  name: Install processor systemd config for testnet
  tags:
    - systemd
    - testnet
  tasks:
  - name: Create processor systemd spec file for testnet
    become: true
    vars:
      network: testnet
      unix_user: "{{ ansible_user_id }}"
    ansible.builtin.template:
      src: templates/systemd/aptos-canvas-processor.service.j2
      dest: "/home/{{ ansible_user_id }}/.config/systemd/user/aptos-canvas-processor-testnet.service"
      owner: "{{ ansible_user_id }}"
      group: root
      mode: '0777'
  - name: Start and enable aptos canvas processor service for testnet
    ansible.builtin.systemd:
      name: aptos-canvas-processor-testnet
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user


- hosts: webservers
  name: Install processor systemd config for mainnet
  tags:
    - systemd
    - mainnet
  tasks:
  - name: Create processor systemd spec file for mainnet
    become: true
    vars:
      network: mainnet
      unix_user: "{{ ansible_user_id }}"
    ansible.builtin.template:
      src: templates/systemd/aptos-canvas-processor.service.j2
      dest: "/home/{{ ansible_user_id }}/.config/systemd/user/aptos-canvas-processor-mainnet.service"
      owner: "{{ ansible_user_id }}"
      group: root
      mode: '0777'
  - name: Start and enable aptos canvas processor service for mainnet
    ansible.builtin.systemd:
      name: aptos-canvas-processor-mainnet
      daemon_reload: true
      enabled: true
      state: restarted
      scope: user


- hosts: webservers
  name: Setup sites with nginx
  tags:
    - nginx
    - sites
  tasks:
    - name: Find nginx config j2 files
      local_action: "shell ls templates/nginx/*.j2 | grep -v base.j2"
      register: nginx_template_files
    - name: Create nginx config files from templates
      become: true
      ansible.builtin.template:
        src: "{{ item }}"
        dest: /etc/nginx/sites-enabled/{{ item | basename | regex_replace('\.j2$', '') }}
        lstrip_blocks: yes
      with_items:
        - "{{ nginx_template_files.stdout.splitlines() }}"


- hosts: webservers
  name: Setup https
  tags:
    - https
  tasks:
    - name: Install socat
      become: true
      ansible.builtin.package:
        name: socat
        state: present
    - name: Install acme.sh within root user
      become: true
      ansible.builtin.shell: sudo su root -c 'curl https://get.acme.sh | sh -s email=danielporteous1@gmail.com --force'
    - name: Set default CA
      become: true
      ansible.builtin.shell: sudo su root -c '/root/.acme.sh/acme.sh --set-default-ca --server letsencrypt'
    - name: Stop nginx to free up port 80 for socat
      become: true
      ansible.builtin.systemd:
        name: nginx
        state: stopped
    - name: Get public IP of this host
      ansible.builtin.command: curl https://ipinfo.io/ip
      register: public_ip
    - name: Get IP of domain
      ansible.builtin.command: "dig -4 +short mainnet.graffio.art"
      register: domain_ip
    - name: Print debug success when both IPs are the same
      debug:
        msg: "Public IP: {{ public_ip.stdout }} Domain IP: {{ domain_ip.stdout }}"
    - name: Confirm both IPs the same
      fail:
        msg: The public IP of the host and the IP of the domain are not the same
      when: public_ip.stdout != domain_ip.stdout
    - name: Print debug success when both IPs are the same
      debug:
        msg: The public IP of the host and the IP of the domain are the same, hopefully this means your DNS records are correct. Also think about NAT. Proceeding with https
    - name: Get all the sites installed
      become: true
      ansible.builtin.shell: cat /etc/nginx/sites-enabled/* | grep "server_name " | grep -v '# ser' | sed 's/.*server_name \(.*\);/\1/' | sed 's/ /\n/' | tr ' ' '\n' | sort -u | grep [a-z] | grep -v tax | tr '\n' ',' | sed 's/.$//'
      register: comma_separated_sites
    - name: Denest comma_separated_sites
      set_fact:
        comma_separated_sites: "{{ comma_separated_sites.stdout }}"
    - name: Write comma separated enabled sites to local file
      local_action: copy content="{{comma_separated_sites}}" dest="{{ playbook_dir }}/sites.comma"
    - name: Make /etc/nginx/danielcerts
      become: true
      ansible.builtin.file:
        path: /etc/nginx/danielcerts
        state: directory
        mode: '0755'
    - name: Run acme.sh to get certs for all the sites
      become: true
      # To make the cert be called testnet.graffio.art, we pass that separately first.
      ansible.builtin.shell: sudo su root -c '/root/.acme.sh/acme.sh --issue --standalone -d testnet.graffio.art -d {{comma_separated_sites.replace(",testnet.graffio.art,", ",")}} --force'
    - name: Install the certs into /etc/nginx/danielcerts/
      become: true
      ansible.builtin.shell: sudo su root -c '/root/.acme.sh/acme.sh --install-cert -d testnet.graffio.art --key-file /etc/nginx/danielcerts/key.pem --fullchain-file /etc/nginx/danielcerts/fullchain.pem --reloadcmd "systemctl restart nginx"'
    - name: Enable / restart nginx
      become: true
      ansible.builtin.systemd:
        name: nginx
        daemon_reload: true
        enabled: true
        state: restarted
