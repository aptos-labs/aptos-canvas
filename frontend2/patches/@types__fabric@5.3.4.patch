diff --git a/fabric-impl.d.ts b/fabric-impl.d.ts
index d47a6cb33d35dba1acae9f8de803e0fd00de7fef..071ebf98ef6e550185484d782f9746dfdc0ec9ea 100644
--- a/fabric-impl.d.ts
+++ b/fabric-impl.d.ts
@@ -381,6 +381,35 @@ type EventName =
     | "dragenter"
     | "dragleave";
 
+interface ITouchEvent extends IEvent {
+    self: {
+        enabled: boolean;
+        gesture: "string";
+        target: { uniqueId: string };
+        bbox: {
+            width: number;
+            height: number;
+            x1: number;
+            y1: number;
+            scaleX: number;
+            scaleY: number;
+            scrollLeft: number;
+            scrollTop: number;
+            x2: number;
+            y2: number;
+            scrollBodyLeft: number;
+            scrollBodyTop: number;
+        };
+        identifier: number;
+        fingers: number;
+        scale: number;
+        rotation: number;
+        state: string;
+        x: number;
+        y: number;
+    }
+}
+
 interface IObservable<T> {
     /**
      * Observes specified event
@@ -389,6 +418,8 @@ interface IObservable<T> {
      */
     on(eventName: EventName, handler: (e: IEvent<MouseEvent>) => void): T;
     on(eventName: "mouse:wheel", handler: (e: IEvent<WheelEvent>) => void): T;
+    on(eventName: "touch:gesture", handler: (e: ITouchEvent) => void): T
+    on(eventName: "touch:drag", handler: (e: ITouchEvent) => void): T
     on(eventName: string, handler: (e: IEvent) => void): T;
 
     /**
@@ -397,6 +428,10 @@ interface IObservable<T> {
      * @param eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
      * @param handler Function to be deleted from EventListeners
      */
+    off(eventName: EventName, handler: (e: IEvent<MouseEvent>) => void): T;
+    off(eventName: "mouse:wheel", handler: (e: IEvent<WheelEvent>) => void): T;
+    off(eventName: "touch:gesture", handler: (e: ITouchEvent) => void): T
+    off(eventName: "touch:drag", handler: (e: ITouchEvent) => void): T
     off(eventName?: string | any, handler?: (e: IEvent) => void): T;
 
     /**
@@ -1949,6 +1984,11 @@ interface ICanvasOptions extends IStaticCanvasOptions {
      * @default
      */
     height?: number | undefined;
+
+    /**
+     * When true, pointer events will be handled like mouse events
+     */
+    enablePointerEvents?: boolean | undefined;
 }
 export interface Canvas extends StaticCanvas {}
 export interface Canvas extends ICanvasOptions {}
@@ -2517,6 +2557,10 @@ interface IImageOptions extends IObjectOptions {
      * Image filter array
      */
     filters?: IBaseFilter[] | undefined;
+    /**
+     * Indicates whether this image will use image smoothing, this is on by default in browsers
+     */
+    imageSmoothing?: boolean | undefined
 }
 interface Image extends Object, IImageOptions {}
 export class Image {
